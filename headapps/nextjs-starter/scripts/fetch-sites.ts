import { createGraphQLClientFactory } from 'lib/graphql-client-factory/create';
import { GraphQLSiteInfoService, SiteInfo } from '@sitecore-content-sdk/nextjs';
import scConfig from 'sitecore.config';
import fs from 'fs';
import path from 'path';
import chalk from 'chalk';
import { SitecoreConfig } from '@sitecore-content-sdk/nextjs/config';

//TODO: better async logic
fetchSites();

async function fetchSites() {
  let sites: SiteInfo[] = [];
  const sitesFilePath = path.resolve('src/temp/sites.js');
  console.log('Fetching site information');
  if (scConfig.multisite.enabled) {
    try {
      const siteInfoService = new GraphQLSiteInfoService({
        clientFactory: createGraphQLClientFactory(scConfig as SitecoreConfig),
      });
      sites = await siteInfoService.fetchSiteInfo();
    } catch (error) {
      console.error(chalk.red('Error fetching site information'));
      console.error(error);
    }
  }
  console.log(`Adding default site ${scConfig.defaultSite} as fallback`);
  sites.unshift({
    name: scConfig.defaultSite,
    language: scConfig.defaultLanguage,
    hostName: '*',
  });
  let sitesText = `/* eslint-disable */
      // Do not edit this file, it is auto-generated at build time!
      // See scripts/bootstrap.ts to modify the generation of this file.
      // The last site in this collection will be the default site specified in configuration, added as fallback in all cases
      const sites = ${JSON.stringify(sites)};\n`;

  sitesText += `module.exports = sites;`;

  console.log(`Writing fetched sites to ${sitesFilePath}`);
  fs.writeFileSync(sitesFilePath, sitesText, { encoding: 'utf8' });
}
